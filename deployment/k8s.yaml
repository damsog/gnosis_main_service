---
# ------------------------------------#
# Namespace                           #
# ------------------------------------#
apiVersion: v1
kind: Namespace
metadata:
  name: ${K8S_NAMESPACE}
spec:
  finalizers:
    - kubernetes
---
# ------------------------------------#
# ConfigMap                           #
# ------------------------------------#
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${K8S_SERVICE_NAME}
  namespace: ${K8S_NAMESPACE}
data:
  DATABASE_URL: ${DATABASE_URL}
  SERVER: ${SERVER}
  PORT: "${PORT}"
  PORT_SWAGGER: "${PORT_SWAGGER}"
  LOGGER_LEVEL: ${LOGGER_LEVEL}
  NODE_ENV: ${NODE_ENV}
  SSL_KEY: ${SSL_KEY}
  SSL_CERT: ${SSL_CERT}
  TOKEN_KEY: ${TOKEN_KEY}
  FACE_ANALYTICS_SERVER: ${FACE_ANALYTICS_SERVER}
  FACE_ANALYTICS_PORT: "${FACE_ANALYTICS_PORT}"
  RESOURCES_PATH: ${RESOURCES_PATH}
  SFTP_HOST: ${SFTP_HOST}
  SFTP_PORT: "${SFTP_PORT}"
  SFTP_USER: ${SFTP_USER}
  SFTP_PASSWORD: "${SFTP_PASSWORD}"

---
# ------------------------------------#
# Deployment                          #
# ------------------------------------#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${K8S_SERVICE_NAME}
  namespace: ${K8S_NAMESPACE}
  labels:
    app: ${K8S_SERVICE_NAME}
spec:
  replicas: ${K8S_MIN_REPLICAS}
  selector:
    matchLabels:
      app: ${K8S_SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${K8S_SERVICE_NAME}
    spec:
      containers:
      - name: ${K8S_SERVICE_NAME}
        image: ${IMAGE_NAME}:${IMAGE_TAG}
        envFrom:
          - configMapRef:
            name: ${K8S_SERVICE_NAME}
        resources:
          requests:
            cpu: ${K8S_RESOURCES_REQUESTS_CPU}
            memory: ${K8S_RESOURCES_REQUESTS_MEMORY}
          limits:
            cpu: ${K8S_RESOURCES_LIMITS_CPU}
            memory: ${K8S_RESOURCES_LIMITS_MEMORY}
        ports:
        - containerPort: 4000

---
# ------------------------------------#
# Internal Service                    #
# ------------------------------------#
apiVersion: v1
kind: Service
metadata:
  name: ${K8S_SERVICE_NAME}
  labels:
    app: ${K8S_SERVICE_NAME}
  namespace: ${K8S_NAMESPACE}
spec:
  type: ClusterIP
  selector:
    app: ${K8S_SERVICE_NAME}
  ports:
    - protocol: TCP
      port: 443
      targetPort: 4000
      name: https
---
# ------------------------------------#
# Ingress                             #
# ------------------------------------#
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${K8S_SERVICE_NAME}
  labels:
    name: ${K8S_SERVICE_NAME}
spec:
  rules:
  - host: ${DOMAIN}
    http:
      paths:
      - path: "/"
        backend:
          service:
            name: ${K8S_SERVICE_NAME}
            port: 
              number: 443

---
# ------------------------------------#
# Service Node                        #
# ------------------------------------#
apiVersion: v1
kind: Service
metadata:
  name: ${K8S_SERVICE_NAME}-node
  labels:
    app: ${K8S_SERVICE_NAME}
  namespace: ${K8S_NAMESPACE}
spec:
  type: NodePort
  selector:
    app: ${K8S_SERVICE_NAME}
  ports:
    - protocol: TCP
      port: 443
      targetPort: 4000
      nodePort: 30100
      name: https